name: Deploy Website with Docker

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Django image
        run: |
          docker buildx create --use
          docker buildx build --push \
            --tag ${{ secrets.DOCKER_USERNAME }}/imagesitewebfontana-django:latest \
            --platform linux/amd64 \
            -f sitetheo/Dockerfile ./sitetheo

      - name: Build and push Nginx image
        run: |
          docker buildx build --push \
            --tag ${{ secrets.DOCKER_USERNAME }}/imagesitewebfontana-nginx:latest \
            --platform linux/amd64 \
            -f nginx/Dockerfile ./nginx

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e

            echo "üöÄ Logging into Docker Hub..."
            
            # R√©cup√©ration ou mise √† jour du d√©p√¥t sur le VPS
            cd /home/${{ secrets.VPS_USER }} || exit 1
            if [ -d "site_web_Fontana" ]; then
              cd site_web_Fontana && git pull
            else
              git clone https://github.com/Theo48-2A/site_web_Fontana.git
              cd site_web_Fontana
            fi

            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            echo "üîÑ Creating .env file for Docker Compose..."
            cat <<EOF > .env
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            ENVIRONMENT=${{ secrets.ENVIRONMENT }}
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            EOF

            echo "üîÑ Pulling latest Docker images..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/imagesitewebfontana-django:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/imagesitewebfontana-nginx:latest

            echo "üõë Stopping and removing old containers..."
            docker-compose down || true
            docker rm -f django_cv nginx_proxy || true  # ‚úÖ Supprime les anciens conteneurs

            echo "üîß Installing Certbot if not installed..."
            if ! command -v certbot &> /dev/null; then
              sudo apt update && sudo apt install -y certbot
            fi

            echo "üîë Checking SSL certificate..."
            if [ ! -d "/etc/letsencrypt/live/theo-fontana.com" ]; then
              echo "üîê SSL certificate missing, generating one..."
              sudo certbot certonly --standalone --noninteractive --agree-tos --email contact@theo-fontana.com -d theo-fontana.com -d www.theo-fontana.com
            else
              echo "üîÑ Renewing SSL certificate if needed..."
              sudo certbot renew --quiet || true
            fi

            echo "‚úÖ Running new containers..."
            docker-compose --env-file .env up -d --force-recreate
        
            sleep 5
            if ! docker ps | grep -q "django_cv"; then
                echo "‚ùå ERROR: Django container is not running!"
                exit 1
            fi
            if ! docker ps | grep -q "nginx_proxy"; then
                echo "‚ùå ERROR: Nginx container is not running!"
                exit 1
            fi
            
            echo "üì¶ Waiting for Django to be ready..."
            sleep 20  # On attend un peu pour s'assurer que Django est bien lanc√©

            echo "üì¶ Running collectstatic inside Django container..."
            docker-compose exec -T django_cv bash -c "
               cd /app && \
               python manage.py collectstatic --noinput > /app/collectstatic.log 2>&1
            "

            echo "üîç Checking collectstatic logs..."
            docker-compose exec django_cv cat /app/collectstatic.log

            echo "üîç Verifying static files..."
            docker-compose exec django_cv ls -lah /app/staticfiles

            echo "üéâ ‚úÖ Deployment completed successfully!"

            echo "üéâ ‚úÖ Deployment completed successfully!"
